#!/usr/bin/env python


# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import os
import sys
import argparse
import numpy as np
from Bio import SeqIO


def get_genome_size(input_file):
    """ parse fasta records in input_file,
        return the fastaName:genomeSize as a dictionary
    """
    genomeSizeDict = {}
    for fasta in SeqIO.parse(input_file, "fasta"):
        name = fasta.name.strip()
        length = len(fasta.seq)
        genomeSizeDict[name] = length
    return genomeSizeDict


def get_chromArrayDict(genomeSizeDict, wig):
    """
    :param genomeSizeDict: a dict of chromosome name and length, got from get_genome_size(input_genome)
    :param wig: fwd or rev wiggle file
    :return: a dict of chromosome:Array
    """
    chromArrayDict = {} # {chrom:Array}
    for chrom in genomeSizeDict.keys():
        chromArrayDict[chrom] = np.zeros(genomeSizeDict[chrom])

    with open(wig, "r") as ih:
        for line in ih:
            if line.startswith("variableStep"):
                chrom = line.strip().split("chrom=")[-1].strip()
                if not chrom in genomeSizeDict:
                    print >> sys.stderr, "ERROR: chromosome %s in your wig file was not found in your genome reference! "%chrom
                    sys.exit(1)
            else:
                line = line.strip().split("\t")
                index = int(line[0])-1
                value = float(line[1])
                if index >= len(chromArrayDict[chrom]):
                    print >> sys.stderr, "ATTENTION: Mapped position at %d was out of genome length %d, on chromosome %s"%(index, genomeSizeDict[chrom], chrom)
                    continue
                chromArrayDict[chrom][index] = value

    return chromArrayDict


def wig2grp(args):
    """ convert wig to grp file
    """
    # test args
    if not (args.fwd_wig or args.rev_wig):
        print >> sys.stderr, "\nERROR: At least one wiggle file need to be given!\n"
        sys.exit(1)

    # wiggle files, prefix and other arguments
    fwd=args.fwd_wig
    rev=args.rev_wig
    prefix=args.prefix
    toInt=args.toInt

    # get genomeSize
    genomeSizeDict = get_genome_size(args.genomeFasta)

    # only fwd or rev wig
    if (fwd and (not rev)) or (rev and (not fwd)):

        if fwd:
            header = "# BASE fwd_grp\n# colour 0:255:0\n"
            wig = fwd
        else:
            header = "# BASE rev_grp\n# colour 0:0:255\n"
            wig = rev

        chromArrayDict = wig2grp(genomeSizeDict, wig)
        for chrom, value_array in chromArrayDict.iteritems():
            pos_array = np.arange(genomeSizeDict[chrom]) + 1
            if prefix:
                outfile = prefix +"_"+ chrom + ".grp"
            else:
                outfile = os.path.basename(wig) +"_"+ chrom +".grp"
            with open(os.path.join(os.getcwd(), outfile), "w") as oh:
                oh.write(header)
                if toInt:
                    for pos, value in zip(pos_array, value_array):
                        oh.write("%d %d\n"%(pos, int(value)))
                else:
                    for pos, value in zip(pos_array, value_array):
                        oh.write("%d %.2f\n"%(pos, value))

    # both fwd and rev wig, integrate into one grp
    else:
        header = "# BASE fwd_grp rev_grp\n# colour 0:255:0 0:0:255\n"
        fwd_chromArrayDict = wig2grp(genomeSizeDict, fwd)
        rev_chromArrayDict = wig2grp(genomeSizeDict, rev)
        for chrom, fwd_value_array in fwd_chromArrayDict.iteritems():
            pos_array = np.arange(genomeSizeDict[chrom]) + 1
            rev_value_array = rev_chromArrayDict[chrom]
            if prefix:
                outfile = prefix +"_"+ chrom + ".grp"
            else:
                if "Forward" in fwd:
                    outfile = os.path.basename(fwd).replace("Forward", "FwdRev") +"_"+ chrom +".grp"
                else:
                    outfile = os.path.basename(fwd).rsplit(".", 1)[0] +"_FwdRev_"+ chrom +".grp"
            with open(os.path.join(os.getcwd(), outfile), "w") as oh:
                oh.write(header)
                if toInt:
                    for pos, fwd_value, rev_value in zip(pos_array, fwd_value_array, rev_value_array):
                        oh.write("%d %d %d\n"%(pos, int(fwd_value), int(rev_value)))
                else:
                    for pos, fwd_value, rev_value in zip(pos_array, fwd_value_array, rev_value_array):
                        oh.write("%d %.2f %.2f\n"%(pos, fwd_value, rev_value))


def read_grp(path2grp, ncol=2):
    """
    :param path2grp: input grp file
    :param ncol:     number of columns in grp file, except the first base column
    :return:         the headers and a list of grp numpy arrays.

    This function used to read in grp file, the default 2 column input grp file format like this:
        # BASE fwd_grp rev_grp
        # colour 0:204:0 0:0:255
        1 0.00 -0.00
        2 0.00 -0.00
        3 0.00 -0.00

    or the 4 column grp file format like this:
        # BASE fwd_cov fwd_tss rev_cov rev_tss
        # colour 0:204:0 255:0:0 0:0:255 255:0:0
        1 0.00 0.00 -0.00 -0.00
        2 0.00 0.00 -0.00 -0.00
        3 0.00 0.00 -0.00 -0.00
    """
    headers, res = []
    for i in range(ncol):
        res.append([])

    with open(path2grp, "r") as ih:
        for line in ih:
            if line.startswith("#"):
                headers.append(line.strip())
                continue
            line = line.strip().split()
            for i, val in enumerate(line[1:]):
                res[i].append(abs(float(val)))

    # convert to np.array
    res = [np.array(arr) for arr in res]

    return headers, res


def average(args):
    grpFile_list = args.input_grps
    prefix = args.prefix
    toInt = args.toInt
    ncol = args.ncol

    if prefix:
        outfile = prefix+".grp"
    else:
        basename = os.path.basename(grpFile_list[0])
        filestem = os.path.splitext(basename)[0]
        outfile = filestem+"_averaged.grp"


    # number of grp files
    n = len(grpFile_list)

    # read in first one, sum the others, then divide by n
    headers, grp_arrays = read_grp(grpFile_list[0], ncol)
    for grp_file in grpFile_list[1:]:
        tmp_headers, tmp_grp_arrays = read_grp(grp_file, ncol)
        assert len(tmp_grp_arrays) == len(grp_arrays), "The input grp files have different number of columns!"
        for i, tmp_arr in enumerate(tmp_grp_arrays):
            grp_arrays[i] += tmp_arr
    for i, arr in enumerate(grp_arrays):
        grp_arrays[i] = arr/n

    # initialize base array as long as genome length
    pos_array = np.arange(len(grp_arrays[0]))
    pos_array += 1

    # make rev to minus, write out averaged grp file
    if ncol == 2:
        grp_arrays[1] *= -1

        with open(outfile, "w") as oh:

            # to customize the line color, we must use space delimited format
            oh.write("# BASE fwd_grp rev_grp\n")
            oh.write("# colour 0:204:0 0:0:255\n")
            if toInt:
                for pos, fwd, rev in zip(pos_array, grp_arrays[0], grp_arrays[1]):
                    oh.write(str(pos)+" %d %d\n"%(int(fwd), int(rev)))
            else:
                for pos, fwd, rev in zip(pos_array, grp_arrays[0], grp_arrays[1]):
                    oh.write(str(pos)+" %.2f %.2f\n"%(fwd, rev))

    else:
        grp_arrays[2] *= -1
        grp_arrays[3] *= -1

        with open(outfile, "w") as oh:
            oh.write("# BASE fwd_cov fwd_tss rev_cov rev_tss\n")
            oh.write("# colour 0:204:0 255:0:0 0:0:255 255:0:0\n")
            if toInt:
                for pos, fwd_cov, fwd_tss, rev_cov, rev_tss in zip(pos_array, grp_arrays[0], grp_arrays[1],
                                                                   grp_arrays[2], grp_arrays[3]):
                    oh.write(str(pos)+" %d %d %d $d\n"%(int(fwd_cov), int(fwd_tss), int(rev_cov), int(rev_tss)))
            else:
                for pos, fwd_cov, fwd_tss, rev_cov, rev_tss in zip(pos_array, grp_arrays[0], grp_arrays[1],
                                                                   grp_arrays[2], grp_arrays[3]):
                    oh.write(str(pos)+" %.2f %.2f %.2f %.2f\n"%(fwd_cov, fwd_tss, rev_cov, rev_tss))



def main():

    # main parser
    parser = argparse.ArgumentParser(description="A set of subcommands for GRP manipulations")

    # parent parser, to specify shared arguments, inherited by subparsers
    parent_parser = argparse.ArgumentParser(add_help=False)
    parent_parser.add_argument("-v", "--version", action="version", version="%(prog)s 1.0")
    parent_parser.add_argument("-p", "--prefix", required=False, help="output prefix for grp file")
    parent_parser.add_argument("-t", "--toInt", required=False, action="store_true", default=True, help="write out integer values")

    # subparsers
    subparsers = parser.add_subparsers(help='available subcommands')

    # ------- #
    # wig2grp #
    # ------- #
    wig2grp_desc="Convert variableStep forward and reverse wig files into fixedStep grp file, to visualize in Artemis"
    parser_wig2grp = subparsers.add_parser('wig2grp', parents=[parent_parser], help='convert wiggle format to grp format', description=wig2grp_desc)
    parser_wig2grp.add_argument("genomeFasta", help="genome fasta file that used in the mapping")
    parser_wig2grp.add_argument('-f', "--fwd_wig", help="forward wig file generated by RSeQC::bam2wig.py")
    parser_wig2grp.add_argument('-r', "--rev_wig", help="reverse wig file generated by RSeQC::bam2wig.py")
    parser_wig2grp.set_defaults(func=wig2grp)

    # ------- #
    # average #
    # ------- #
    parser_average = subparsers.add_parser('average', parents=[parent_parser], help='average individual grp files into one grp file')
    parser_average.add_argument("input_grps", nargs="+", help="grp files to be averaged")
    parser_average.add_argument("ncol", type=int, choices=[2, 4], default=2, help="number of value columns in grp file")
    parser_average.set_defaults(func=average)

    # parse args
    args = parser.parse_args()
    args.func(args)

if __name__ == "__main__":
    main()

